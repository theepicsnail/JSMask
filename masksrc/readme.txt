
GMask でのマスク処理。(97 7/7 古溝 剛)


1.縦・横ガラス処理について。-------------------------------

  横ガラスの場合は、上から 8 ドット(デフォルト値)間隔で、マスク部の画像を、
  区切る。それぞれの区切られた部分で上下を入れ替える。

  縦ガラスの場合は、左から 8 ドット(デフォルト値)間隔で、マスク部の画像を、
  区切る。それぞれの区切られた部分で左右を入れ替える。

  それぞれ 2度やれば当然元に戻る。


2. ネガポジ反転について。----------------------------------

  各 RGB 値のビット反転をする。 
  2度やれば当然元に戻る。


3. XOR 0x80 処理について。---------------------------------

  各 RGB 値と 0x80 との排他的論理和をとる。
  つまり、各色の最上位ビット b7 が立っていれば落とし、落ちていれば立てる。
  2度やれば当然元に戻る。


4. RGB 値入替えについて。----------------------------------

  各 RGB 値を順に入れ替える。
  3度目で元に戻る。


5. Winマスク処理について。---------------------------------

  左から、16 ドット間隔でマスク部の画像を縦に区切る。
  それぞれの区切られた部分の縦のラインに左から 0〜15 の番号を振ったとすると、
  12, 8, 6, 15, 9, 13, 2, 11, 1, 4, 14, 7, 0, 5, 10, 3 の順に並べ替える。
  なお、もう一度並べ替えると元に戻る。


6. Mekoマスク処理について。--------------------------------

  これは、独自のランダム変数を使っていると思われる。
  しかし、さほど複雑ではない。

  まず、マスク部の画像を 16 x 16 ドットの益に区切る。
  各益に左上から右に向かって順に番号を振る。
  例えば、3 x 4 益なら、
    1, 2, 3, 4,
    5, 6, 7, 8,
    9,10,11,12,

  これが、特定のランダム変数により、並べ替えられる。
  ここで重要なのは、区切られたのが何益になろうが、並べ替えの
  順に変化はない。

  例えば、上記の 12 益の場合、
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 は、
  9, 5, 3, 7, 4, 10, 2, 6, 11, 12, 8, 1 と並べ替えられる。

  2 x 5, 5 x 2, 1 x 10, 10 x 1 等の 10 益の場合は、
  9, 5, 3, 7, 4, 10, 2, 6, 8, 1 となる。

  付属の meko.c は、この並べ替えの順を出力するためのプログラムである。
  インクルードされる mekorand.h は、並べ替え順を得るための meko 特定ランダム値。

  コンパイルされたプログラム meko.exe は、益数を引数にして呼ぶ。

  例えば、meko 15 リターンで、以下の出力が得られる。

  C:\>meko 15
  15 13 9 5 3 7 4 10 2 6 11 14 12 8 1

  これで、正順のメコマスク並べ替えができる。逆順はこの逆をやればよい。
  なお、同じ事を 2度やっても元には戻らない。そのため、正順と逆順がある。

7. FL マスク処理について。
  これは、可逆性マスク処理。つまり 2度目は元に戻る。FLマスクでは、益のサイズは
   8 x 8ドット。

  ところで、手っ取り早く可逆性の並べ替えを得るにはどうするか .....?
  それは、各益をならべて1本の帯にしてしまうのがよい。
  それをひっくり返せば、ならべ変わり、再度ひっくり返せば、元に戻る。

  FLマスクの作者は、その帯を渦巻き状に配置した。
  まず、左下を基点として反時計回りに外から内へ向かって一本の帯を配置する。
  たとえは、4 x 4 益の場合、以下のような渦の番号を振る。
     10  9  8  7
     11 16 15  6
     12 13 14  5
      1  2  3  4
  この渦の帯をひっくり返せば、FL マスクの完成。
      7  8  9 10
      6  1  2 11
      5  4  3 12
     16 15 14 13
  FL マスクのネガポジ反転処理は、並べ替えた後、位置が変わる益は反転し、
  並べ替え後も変わらない位置の益は、反転しない。

  付属の fl.c は、この並べ替えるべき順序を得るためのプログラム。
  コンパイルされた fl.exe は、縦の益数と横の益数を引数とする。

  たとえば、fl 4 6 リターンで、以下の結果が得られる。

  C:\>fl 4 6
    4  3  2  1  7 13
    5 19 20 21 22 14
    6 12 18 24 23 15
    8  9 10 11 17 16

  なお、このプログラムで得られる数値は、左上から右に順に番号を
  振った場合の並べ替えの順をあらわしている。

  上記の例の場合は、
    1  2  3  4  5  6
    7  8  9 10 11 12
   13 14 15 16 17 18
   19 20 21 22 23 24
  を、並べ替えるときの順。

7. CPマスク処理について。--------------------------------

  これは、可逆性マスク処理。つまり 2度目は元に戻る。CPマスクでは、益のサイズは
   8 x 8ドット。
  まず、１６文字以下のコード(アルファベット文字列)が必要。
  このコードと益の総数から並べ替えの順が決定する。なお、ひっくり返して(上下入替)
  右９０度に回転する益が出てくる。
  色の変換はネガポジ反転処理と Red <-> Green の入れ替え。
  詳しくは、CP.C 見ればわかるはず。

  CP.EXE は、引数にコードと益数を指定する。

  例えば  cp abc 9 リターンで以下の結果が得られる。
   1 -o,   0 -o,   7 -o,   4 -o,   3 -o,   8 -o,   6 -x,   2 -o,   5 -o,

  これは、コードパターンに「abc」を指定したときの、9 益の並べ替え順で、
    0 1 2       1 0 7
    3 4 5  ---> 4 3 8
    6 7 8       6 2 5
  となり、「-o」の部分は、益内で上下入れ替えと右90度回転を行う部分。

  なお、このコードは、JPEG ファイルに暗号化して書きこまれる。
  詳しくは CPCD.C を見ればわかる。

  CPCD.EXE は、引数にCPコードを指定すると、その暗号コードを表示する。

  例えば、cpcd abc リターンで以下の結果が得られる。
     address --> 0x12 0x22 0x32--------------
     [A](41) ---> 2a,  09,  09
     [B](42) ---> 0b,  0b,  0b
     [C](43) ---> 16,  36,  0d

  この、2a, 0b, 16 または、09, 0b, 36 または 09, 0b, 3dが暗号化されたコードで
  JPEG ファイルに書きこまれる。アドレスは、0x12, 0x22, 0x32 の三ヶ所。

  ところで、実はこの暗号化ルーチンの正解と思われる独自解析のソースが、7/7 日に
  高橋 良夫さんから送られてきた。ご本人の承諾を得たので以下に記す。

  void cp_code( unsigned char *buff )
  {
    static unsigned char *CP_KEY = "kIUCHIuCHINO";

    int i, j;
    unsigned char *wp, *cp;

    wp = buff;
    cp = CP_KEY;

    for ( j = 0; j < 3; j++ ) {
        for ( i = 0; i < 16; i++ ) {
            *wp ^= *cp++;
            if ( *wp & 0x80 ) *wp = '\0';
            wp++;
            if ( *cp == '\0' ) cp = CP_KEY;
        }
    }
  }

  buff は、48バイトで、16バイト間隔に、CPコードを英大文字で書きいれ、
  この関数を呼ぶ。この buff が、Jpeg 0x12 からの 48 バイトになる。

-----------------------
なお、MEKOMASK は、 五十嵐 洋二さん作のマスクツール。
      WINMASK は、 外村 高章さん作のマスクツール。
      FLMASK は、 Ｇenesis さん作のマスクツール。
      CPMASK は、内野さんとＧenesis さん合作のマスク技法。

また、CPマスクコードの暗号化は作者不詳の「DECP.COM」を参考にして v1.50 を
公開したが、ある方より誤りの指摘をされ、v1.51 にて訂正。


 最後に。私は、マスク処理の仕掛け人にはなりたくないので、
 GMask に独自の新たなマスク処理は加えていない。
 ただ、単に、こんなものはフリーであるべきだと思い、作ったにすぎない。
-------------------------------------------------------------------------------
 古溝 剛  furumizo@mb.infoweb.or.jp
